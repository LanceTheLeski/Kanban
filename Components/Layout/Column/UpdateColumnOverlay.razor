@using Newtonsoft.Json
@using Kanban.Components.DTOs
@using System.Net.Http.Headers

@inject HttpClient http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@rendermode RenderMode.InteractiveServer

<MudPaper>
    <MudText>Edit Column</MudText>

    <MudExpansionPanels>
        <MudExpansionPanel Text="Column" MaxHeight="1000" IsExpandedChanged="ColumnListExpandedChanged">
            @_columnList
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudTextField T="string" @bind-Value="columnTitle" Label="New Title" Variant="Variant.Filled" AutoGrow HelperText="Column Title" />

     <MudExpansionPanels>
         <MudExpansionPanel Text="Order" MaxHeight="1000" IsExpandedChanged="ColumnOrderListExpandedChanged">
             @_columnOrderList
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudButtonGroup>
        <MudButton OnClick="UpdateColumn">Submit</MudButton>
        <MudButton OnClick="CloseColumnOverlay">Discard</MudButton>
    </MudButtonGroup>
 </MudPaper>

@code 
{
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public List<Guid> Columns { get; set; }
    [Parameter]
    public EventCallback<List<Guid>> ColumnsChanged { get; set; }

    [Parameter]
    public List<string> ColumnTitles { get; set; }
    [Parameter]
    public EventCallback<List<string>> ColumnTitlesChanged { get; set; }

    private static List<Guid> _columns = new List<Guid> ();
    private static List<string> _columnTitles = new List<string> ();

    public UpdateColumnOverlay ()
    {
        Open = false;
        _columns = Columns;
        _columnTitles = ColumnTitles;
    }

    private RenderFragment _columnList;
    private async Task ColumnListExpandedChanged (bool showColumns)
    {
        _columns = Columns;
        _columnTitles = ColumnTitles;

        if (showColumns)
        {
            _columnList = _columnListRenderFragment ();
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay (350).ContinueWith (task => _columnList = null).AndForget ();
        }
    }

    private string columnTitle = "";
    private static string columnSelectedToDelete = "";
    private RenderFragment _columnListRenderFragment ()
    {
        return __builder =>
        {
            <MudPaper Class="d-inline-flex flex-grow-1 overflow-auto" Style="width: 300px; height: 200px;">
                <MudStack Class="flex-grow-1" Width="100%" Height="100%">
                    <MudList Clickable="true">
                        @foreach (var columnTitle in _columnTitles)
                        {
                            <MudListItem OnClick="(() => SetColumnNameToUpdate (columnTitle))">
                                Column Name: @(columnTitle)
                            </MudListItem>
                        }
                    </MudList>
                </MudStack>
            </MudPaper>
        };
    }

    private static async Task SetColumnNameToUpdate (string columnName)
    {
        var matchingColumnNameCount = _columnTitles.FindAll (column => column == columnName).Count ();
        if (matchingColumnNameCount is not 1)
        {
            // Should we throw exceptions? Or have the snackbar display exceptions?
            // I think that the API should throw exceptions and the Blazor UI should maybe use something reliable like the snackbar.
            throw new Exception ($"The column selected does not correspond to a single column in our list of columns. Number of this column found: {matchingColumnNameCount}");
        }

        columnSelectedToDelete = columnName;
    }

    private RenderFragment _columnOrderList;
    private async Task ColumnOrderListExpandedChanged (bool showColumnOrders)
    {
        _columns = Columns;
        _columnTitles = ColumnTitles;

        if (showColumnOrders)
        {
            _columnOrderList = _columnOrderListRenderFragment ();
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay (350).ContinueWith (task => _columnOrderList = null).AndForget ();
        }
    }

    private static int columnOrderSelected = -1;//Have a method set this later...
    private RenderFragment _columnOrderListRenderFragment ()
    {
        return __builder =>
        {
            <MudPaper Class="d-inline-flex flex-grow-1 overflow-auto" Style="width: 300px; height: 200px;">
                <MudStack Class="flex-grow-1" Width="100%" Height="100%">
                    <MudList Clickable="true">
                        @foreach (var columnOrder in Enumerable.Range (0, _columnTitles.Count ()))
                        {
                            <MudListItem OnClick="(() => columnOrderSelected = columnOrder)">
                                Column Name: @(columnOrder)
                            </MudListItem>
                        }
                    </MudList>
                </MudStack>
            </MudPaper>
        };
    }

    private async Task UpdateColumn ()
    {
        //Keep in mind that on a given board, column names should be unique.
        var columnToDeleteListIndex = _columnTitles.IndexOf (columnSelectedToDelete);
        var columnToDeleteGuid = _columns [columnToDeleteListIndex];

        var patchRequestForTitle = string.IsNullOrWhiteSpace (columnTitle) ? 
                                        "" : 
                                        $@"{{ ""op"": ""replace"", ""path"": ""/Title"", ""value"": ""{columnTitle}"" }},";
        var patchRequestForOrder = columnOrderSelected is not -1 ? 
                                        "" : 
                                        $@"{{ ""op"": ""replace"", ""path"": ""/Order"", ""value"": ""{columnOrderSelected}"" }}";

        if (patchRequestForTitle is "" && patchRequestForOrder is "") 
            return;

        var patchRequest =
        $@"[
            {patchRequestForTitle}
            {patchRequestForOrder}
        ]";

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Patch, @$"{NavigationManager.BaseUri}kanban/columns/update/{columnToDeleteGuid}");
        httpRequestMessage.Content = new StringContent (patchRequest, mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add ($"Could not update Column. Error code: {response.StatusCode}");
        }

        //Columns.(columnToDeleteListIndex); adjust later..
        await ColumnsChanged.InvokeAsync (_columns);

        ColumnTitles.RemoveAt (columnToDeleteListIndex);
        await ColumnTitlesChanged.InvokeAsync (_columnTitles);
    }

    private void CloseColumnOverlay ()
    {
        Open = false;
        OpenChanged.InvokeAsync (Open);
    }
}