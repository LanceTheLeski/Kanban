@using Newtonsoft.Json
@using Kanban.Components.DTOs
@using System.Net.Http.Headers

@inject HttpClient http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@rendermode RenderMode.InteractiveServer

<MudPaper>
    <MudText>Add a New Column</MudText>
    <MudTextField T="string" @bind-Value="columnTitle" Label="Title" Variant="Variant.Filled" AutoGrow HelperText="Column Title" />
    <MudTextField T="string" @bind-Value="columnOrder" Label="Order" Variant="Variant.Filled" AutoGrow HelperText="Column Order" />
    <MudButtonGroup>
        <MudButton OnClick="CreateColumn">Submit</MudButton>
        <MudButton OnClick="CloseColumnOverlay">Discard</MudButton>
    </MudButtonGroup>
</MudPaper>

@code 
{
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public List<Guid> Columns { get; set; }
    [Parameter]
    public EventCallback<List<Guid>> ColumnsChanged { get; set; }

    [Parameter]
    public List<string> ColumnTitles { get; set; }
    [Parameter]
    public EventCallback<List<string>> ColumnTitlesChanged { get; set; }

    private static List<Guid> _columns = new List<Guid> ();
    private static List<string> _columnTitles = new List<string> ();

    public CreateColumnOverlay ()
    {
        Open = false;
        _columns = Columns;
        _columnTitles = ColumnTitles;
    }

    private string columnTitle = "";
    private string columnOrder = "";
    private async Task<ColumnResponse> CreateColumn ()
    {
        int? order = null;
        try
        {
            order = columnOrder is not null ?
                int.Parse (columnOrder) :
                Columns.Count ();
        }
        catch (FormatException)
        {
            Snackbar.Add("Could not add new Column. The input for Order was invalid.");
        }

        var createRequest = new ColumnCreateRequest
        {
            Title = columnTitle,
            Order = order!.Value,
            BoardID = Guid.Parse ("20a88077-10d4-4648-92cb-7dc7ba5b8df5")
        };

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Post, @$"{NavigationManager.BaseUri}kanban/columns/create");
        httpRequestMessage.Content = new StringContent (JsonConvert.SerializeObject (createRequest), mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserialized = JsonConvert.DeserializeObject<ColumnResponse> (responseBody);

            Columns.Insert (deserialized.Order, deserialized.ID);
            await ColumnsChanged.InvokeAsync (Columns);

            ColumnTitles.Insert (deserialized.Order, deserialized.Title);
            await ColumnTitlesChanged.InvokeAsync (ColumnTitles);

            return deserialized;
        }

        return null;
    }

    private void CloseColumnOverlay ()
    {
        Open = false;
        OpenChanged.InvokeAsync (Open);
    }
}