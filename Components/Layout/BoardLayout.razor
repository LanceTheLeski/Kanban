@using Newtonsoft.Json
@using Kanban.Components.DTOs
@using Kanban.Components.DTOs.ToPossiblyDelete

@inject HttpClient http
@inject NavigationManager NavigationManager

@rendermode RenderMode.InteractiveServer

<MudPaper>
    <MudButton OnClick="OpenCardOverlay">Add Card</MudButton><!--Should be added to each CardArea instead so the card goes there immediately-->
    <MudButton OnClick="OpenSwimlaneOverlay">Add/Edit Swimlane</MudButton>
    <MudButton OnClick="OpenColumnOverlay">Add/Edit Column</MudButton>
    <MudButton OnClick="OpenBoardOverlay">Edit Board</MudButton>
    <MudButton>String: @tempString</MudButton>
</MudPaper>
<MudGrid Class="d-flex flex-column" Style="background-color: lightblue" Spacing="0">
    <MudItem>
        <MudPaper Height="75px" Style="background-color: yellowgreen">
            <MudGrid>
                <MudItem>
                    <MudPaper Width="120px">X</MudPaper>
                </MudItem>
                @foreach (var rowIndex in Enumerable.Range (1, _cards.Select (card => card.RowNumber).Distinct ().Count ()))
                {
                    <MudItem>
                        <MudPaper Width="150px" Style="background-color: darkturquoise" Class="align-self-center">Column Index: @rowIndex</MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudDropContainer T="DropCard" Items="_cards" ItemDropped="ItemUpdated" ItemsSelector="@((card, dropzone) => card.CardArea == dropzone)">
        <ChildContent>
            <!--Can convert the below loop and rowList loop to Range of numbers like above... That would probable be better?-->
            @foreach (var columnIndex in Enumerable.Range(0, _cards.Select(card => card.ColumnNumber).Distinct().Count()))
            {
                <MudItem>
                    <MudPaper Height="250px" Style="background-color: wheat">
                        <MudGrid>
                            <MudItem>
                                <MudPaper Width="120px" Style="background-color: lightcoral" Class="align-self-center">Row Index: @columnIndex</MudPaper>
                            </MudItem>

                            @foreach (var rowIndex in Enumerable.Range (0, _cards.Select (card => card.RowNumber).Distinct ().Count ()))
                            {
                                var identifier = columnIndex + "_" + rowIndex;
                                <MudItem Style="height: 250px;">
                                    <MudList Clickable="true" Class="d-flex flex-column mud-height-full" Style="height: 250px;">
                                    <!--We want columns to have a set width-->
                                    <!--This paper is important and will hold all fot he cards. There will have to be ways of expanding and moving cards between theses.-->
                                        <MudDropZone CanDrop="@((dropcard) => true)" T="DropCard" Identifier="@identifier" CanDropClass="mud-border-success" Style="background-color: cornflowerblue; width: 150px; height: 200px;" Class="d-flex flex-wrap flex-grow-1 justify-space-around gap-4 pa-2 overflow-auto" />
                                    </MudList>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        </ChildContent>
        <ItemRenderer>
            <MudPaper Class="rounded-lg gap-0" Style="width: 100px; height: 200px; text-align: center; background-color: lightyellow">
                <MudStack Class="d-inline-flex flex-grow-1" AlignItems="AlignItems.Center" Spacing="0">
                    <MudPaper Width="100%" MinHeight="160px;">
                        <MudListItem OnClick="(() => OpenOverlay(context))">
                            
                                <MudText Align="Align.Center">@context.Title</MudText>
                                <br />
                                <MudText Style="max-height: 70px;">@context.Description</MudText>
                            
                        </MudListItem>
                    </MudPaper>
                    <MudPaper Width="100%">
                        <MudButton Size="Size.Small">Edit</MudButton>
                    </MudPaper>
                </MudStack>
            </MudPaper>
        </ItemRenderer>

    </MudDropContainer>
</MudGrid>

<MudOverlay @bind-Visible="overlayIsVisible" DarkBackground="true" ZIndex="100" AutoClose="true"><!--Edit card-->
    <MudPaper>
        @cardSelected.Title
    </MudPaper>
</MudOverlay>

<MudOverlay @bind-Visible="cardOverlayIsVisible" DarkBackground="true" ZIndex="100"><!--Add card-->
    <MudPaper Width="600px">
        <MudText>Add a New Card</MudText>
        <MudTextField T="string" Label="Title" Variant="Variant.Filled" AutoGrow HelperText="Card Title" />
        <MudTextField T="string" Label="Description" Variant="Variant.Filled" AutoGrow Lines="7" HelperText="Description" />
        <MudButtonGroup>
            <MudButton>Submit</MudButton>
            <MudButton OnClick="CloseCardOverlay">Discard</MudButton>
        </MudButtonGroup>
    </MudPaper>
</MudOverlay>

<MudOverlay @bind-Visible="swimlaneOverlayIsVisible" DarkBackground="true" ZIndex="100"><!--Add Swimlane-->
    <MudPaper>
        <MudText>Add a New Swimlane</MudText>
        <MudTextField T="string" Label="Title" Variant="Variant.Filled" AutoGrow HelperText="Swimlane Title" />
        <MudButtonGroup>
            <MudButton>Submit</MudButton>
            <MudButton OnClick="CloseSwimlaneOverlay">Discard</MudButton>
        </MudButtonGroup>
    </MudPaper>
</MudOverlay>

<MudOverlay @bind-Visible="columnOverlayIsVisible" DarkBackground="true" ZIndex="100"><!--Add Column-->
     <MudPaper>
        <MudText>Add a New Column</MudText>
        <MudTextField T="string" Label="Title" Variant="Variant.Filled" AutoGrow HelperText="Column Title" />
        <MudButtonGroup>
            <MudButton>Submit</MudButton>
            <MudButton OnClick="CloseColumnOverlay">Discard</MudButton>
        </MudButtonGroup>
     </MudPaper>
</MudOverlay>

<MudOverlay @bind-Visible="boardOverlayIsVisible" DarkBackground="true" ZIndex="100"><!--Board Menu-->
     <MudPaper>
        <MudText>Add/Edit Board</MudText>
        <MudTextField T="string" Label="Title" Variant="Variant.Filled" AutoGrow HelperText="Board Title" />
        <MudButtonGroup>
            <MudButton>Submit</MudButton>
            <MudButton OnClick="CloseBoardOverlay">Discard</MudButton>
        </MudButtonGroup>
     </MudPaper>
</MudOverlay>

<MudOverlay @bind-Visible="calendarOverlayIsVisible" DarkBackground="true" ZIndex="100"><!--Calendar Screen-->
     <MudPaper>
         <MudText>Edit calendar</MudText>
         <MudButtonGroup>
             <MudButton>Submit</MudButton>
             <MudButton OnClick="CloseCalendarOverlay">Discard</MudButton>
         </MudButtonGroup>
     </MudPaper>
</MudOverlay>

@code
{
    //On page load:
    protected override async Task OnInitializedAsync ()
    {
        //Make async one day..
        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Get, @$"{NavigationManager.BaseUri}kanban/getboard/20a88077-10d4-4648-92cb-7dc7ba5b8df5");

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserialized = JsonConvert.DeserializeObject<BoardResponse> (responseBody);

            tempString = deserialized.Columns.FirstOrDefault()?.Title;
        }
    }

    public string tempString = "...Loading...";

    public Card cardSelected = null;

    private void EditCard (Card cardToEdit)
    {

    }
    private void EditSwimlane (Swimlane swimlane)
    {

    }
    public void EditColumn (Column column)
    {

    }
    public void EditBoard (Board board)
    {

    }

    private void ItemUpdated(MudItemDropInfo<DropCard> cardToUpdate)
    {
        cardToUpdate.Item.CardArea = cardToUpdate.DropzoneIdentifier;
    }

    public class DropCard : Card
    {
        public string CardArea { get; set; }
    }

    public bool overlayIsVisible = false;
    public void OpenOverlay(Card cardToOverlay)
    {
        cardSelected = cardToOverlay;
        overlayIsVisible = true;
    }

    public bool cardOverlayIsVisible = false;
    public void OpenCardOverlay()
    {
        cardOverlayIsVisible = true;
    }
    public void CloseCardOverlay()
    {
        cardOverlayIsVisible = false;
    }

    public bool swimlaneOverlayIsVisible = false;
    public void OpenSwimlaneOverlay ()
    {
        swimlaneOverlayIsVisible = true;
    }
    public void CloseSwimlaneOverlay ()
    {
        swimlaneOverlayIsVisible = false;
    }

    public bool columnOverlayIsVisible = false;
    public void OpenColumnOverlay ()
    {
        columnOverlayIsVisible = true;
    }
    public void CloseColumnOverlay ()
    {
        columnOverlayIsVisible = false;
    }

    public bool boardOverlayIsVisible = false;
    public void OpenBoardOverlay ()
    {
        boardOverlayIsVisible = true;
    }
    public void CloseBoardOverlay ()
    {
        boardOverlayIsVisible = false;
    }

    public bool calendarOverlayIsVisible = false;
    public void OpenCalendarOverlay ()
    {
        calendarOverlayIsVisible = true;
    }
    public void CloseCalendarOverlay ()
    {
        calendarOverlayIsVisible = false;
    }

    List<DropCard> _cards = new List<DropCard>
    {
        new DropCard { Title = "Card 1", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 0, CardArea = "0_0" },
        new DropCard { Title = "Card 2", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 0, CardArea = "0_0" },
        new DropCard { Title = "Card 3", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 0, CardArea = "0_0" },
        new DropCard { Title = "Card a", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 1, CardArea = "0_1" },
        new DropCard { Title = "Card b", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 1, CardArea = "0_1" },
        new DropCard { Title = "Card c", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 1, CardArea = "0_1" },
        new DropCard { Title = "Card u", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 2, CardArea = "0_2" },
        new DropCard { Title = "Card u", Description = "Words words wrods words words words elephants", ColumnNumber = 0, RowNumber = 2, CardArea = "0_2" },
        new DropCard { Title = "Card v", Description = "Words words wrods words words words elephants", ColumnNumber = 1, RowNumber = 0, CardArea = "1_0" },
        new DropCard { Title = "Card 1", Description = "Words words wrods words words words elephants", ColumnNumber = 1, RowNumber = 2, CardArea = "1_2" },
        new DropCard { Title = "Card 2", Description = "Words words wrods words words words elephants", ColumnNumber = 1, RowNumber = 2, CardArea = "1_2" },
        new DropCard { Title = "Card 3", Description = "Words words wrods words words words elephants", ColumnNumber = 1, RowNumber = 2, CardArea = "1_2" },
        new DropCard { Title = "Card d", Description = "Words words wrods words words words elephants", ColumnNumber = 1, RowNumber = 3, CardArea = "1_3" },
        new DropCard { Title = "Card e", ColumnNumber = 1, RowNumber = 3, CardArea = "1_3" },
        new DropCard { Title = "Card f", ColumnNumber = 1, RowNumber = 3, CardArea = "1_3" },
        new DropCard { Title = "Card 1", ColumnNumber = 2, RowNumber = 0, CardArea = "2_0" },
        new DropCard { Title = "Card 2", Description = "Words words wrods words words words elephants", ColumnNumber = 2, RowNumber = 0, CardArea = "2_0" },
        new DropCard { Title = "Card 3", ColumnNumber = 2, RowNumber = 0, CardArea = "2_0" },
        new DropCard { Title = "Card l", ColumnNumber = 2, RowNumber = 1, CardArea = "2_1" },
        new DropCard { Title = "Card a", Description = "Words words wrods words words words elephants", ColumnNumber = 2, RowNumber = 1, CardArea = "2_1" },
        new DropCard { Title = "Card n", ColumnNumber = 2, RowNumber = 1, CardArea = "2_1" },
        new DropCard { Title = "Card c", ColumnNumber = 2, RowNumber = 1, CardArea = "2_1" },
        new DropCard { Title = "Card e", ColumnNumber = 2, RowNumber = 1, CardArea = "2_1" },
        new DropCard { Title = "Card l", ColumnNumber = 2, RowNumber = 1, CardArea = "2_1" }
    };
}