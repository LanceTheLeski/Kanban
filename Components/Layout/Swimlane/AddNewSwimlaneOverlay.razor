@using Newtonsoft.Json
@using Kanban.Components.DTOs;
@using System.Net.Http.Headers

@inject HttpClient http
@inject NavigationManager NavigationManager

<MudPaper>
    <MudText>Add a New Swimlane</MudText>
    <MudTextField T="string" Label="Title" Variant="Variant.Filled" AutoGrow HelperText="Swimlane Title" />
    <MudButtonGroup>
        <MudButton OnClick="CreateSwimlane">Submit</MudButton>
        <MudButton OnClick="CloseSwimlaneOverlay">Discard</MudButton>
    </MudButtonGroup>
</MudPaper>

@code 
{
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public List<string> SwimlaneTitles { get; set; }
    [Parameter]
    public EventCallback<List<string>> SwimlaneTitlesChanged { get; set; }

    [Parameter]
    public List<Guid> Swimlanes { get; set; }
    [Parameter]
    public EventCallback<List<Guid>> SwimlanesChanged { get; set; }

    private static List<Guid> _swimlanes = new List<Guid> ();
    private static List<string> _swimlaneTitles = new List<string> ();

    public AddNewSwimlaneOverlay ()
    {
        Open = false;
        _swimlanes = Swimlanes;
        _swimlaneTitles = SwimlaneTitles;
    }

    private string swimlaneTitle = "";
    private string swimlaneOrder = "";
    private async Task<SwimlaneResponse> CreateSwimlane ()
    {
        var createRequest = new SwimlaneCreateRequest
        {
            Title = swimlaneTitle,
            Order = int.Parse (swimlaneOrder),
            BoardID = Guid.Parse ("20a88077-10d4-4648-92cb-7dc7ba5b8df5")
        };

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Patch, @$"{NavigationManager.BaseUri}kanban/updateswimlane");
        httpRequestMessage.Content = new StringContent (JsonConvert.SerializeObject (createRequest), mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserialized = JsonConvert.DeserializeObject<SwimlaneResponse> (responseBody);

            Swimlanes.Insert (deserialized.Order, deserialized.ID);
            await SwimlanesChanged.InvokeAsync ();

            SwimlaneTitles.Insert (deserialized.Order, deserialized.Title);
            await SwimlaneTitlesChanged.InvokeAsync();
            
            //Cards will need to have their position (SwimlaneOrder) changed as well..

            return deserialized;
        }

        //Show an error on the snackbar.

        return null;
    }


    private void CloseSwimlaneOverlay ()
    {
        Open = false;
        OpenChanged.InvokeAsync (Open);
    }
}