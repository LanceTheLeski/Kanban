@using Newtonsoft.Json
@using Kanban.Components.DTOs
@using Kanban.Components.DTOs.ToPossiblyDelete
@using Kanban.Components.Layout
@using System.Net.Http.Headers

@inject HttpClient http
@inject NavigationManager NavigationManager

@page "/"

<PageTitle>Board</PageTitle>

@rendermode RenderMode.InteractiveServer

<MudPaper>
    <MudButton OnClick="OpenCardOverlay">Add Card</MudButton><!--Should be added to each CardArea instead so the card goes there immediately-->
    <AddNewCardOverlay @bind-Open="cardOverlayIsOpen" @bind-Cards="_cards" @bind-Columns="_columns" @bind-ColumnTitles="_columnTitles" />

    <MudButton OnClick="OpenSwimlaneOverlay">Add/Edit Swimlane</MudButton>
    <AddNewSwimlaneOverlay @bind-Open="swimlaneOverlayIsOpen" />

    <MudButton OnClick="OpenColumnOverlay">Add/Edit Column</MudButton>
    <AddNewColumnOverlay @bind-Open="columnOverlayIsOpen" />

    <MudButton OnClick="OpenBoardOverlay">Edit Board</MudButton>
    <AddManageBoardOverlay @bind-Open="boardOverlayIsOpen" />

    <MudButton OnClick="Troubleshoot">Custom Text: @TroubleshootText</MudButton>
</MudPaper>
<MudGrid Class="d-flex flex-column" Style="background-color: lightblue" Spacing="0">
    <MudItem>
        <MudPaper Height="75px" Style="background-color: yellowgreen">
            <MudGrid>
                <MudItem>
                    <MudPaper Width="120px">X</MudPaper>
                </MudItem>
                @foreach (var columnIndex in Enumerable.Range (0, _columnTitles.Count ()))
                {
                    <MudItem>
                        <MudPaper Width="150px" Style="background-color: darkturquoise" Class="align-self-center">@(_columnTitles [columnIndex])</MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudDropContainer T="DropCard" Items="_cards" ItemDropped="UpdateCard" ItemsSelector="@((card, dropzone) => card.CardArea == dropzone)">
        <ChildContent>
            <!--Can convert the below loop and rowList loop to Range of numbers like above... That would probable be better ? -->
            @foreach (var rowIndex in Enumerable.Range(0, _swimlaneTitles.Count()))
            {
                <MudItem>
                    <MudPaper Height="250px" Style="background-color: wheat">
                        <MudGrid>
                            <MudItem>
                                <MudPaper Width="120px" Style="background-color: lightcoral" Class="align-self-center">@(_swimlaneTitles [rowIndex])</MudPaper>
                            </MudItem>

                            @foreach (var columnIndex in Enumerable.Range (0, _columnTitles.Count ()))
                            {
                                var identifier = rowIndex + "_" + columnIndex;
                                <MudItem Style="height: 250px;">
                                    <MudList Clickable="true" Class="d-flex flex-column mud-height-full" Style="height: 250px;">
                                    <!--We want columns to have a set width-->
                                    <!--This paper is important and will hold all fot he cards. There will have to be ways of expanding and moving cards between theses.-->
                                        <MudDropZone CanDrop="@((dropcard) => true)" T="DropCard" Identifier="@identifier" CanDropClass="mud-border-success" Style="background-color: cornflowerblue; width: 150px; height: 200px;" Class="d-flex flex-wrap flex-grow-1 justify-space-around gap-4 pa-2 overflow-auto" />
                                    </MudList>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        </ChildContent>
        <ItemRenderer>
            
        </ItemRenderer>

    </MudDropContainer>
</MudGrid>

@code
{
    public List<DropCard> _cards = new List<DropCard> ();

    public List<string> _swimlaneTitles = new ();
    public List<Guid> _swimlanes = new List<Guid> ();

    public List<string> _columnTitles = new ();
    public List<Guid> _columns = new List<Guid> ();

    //On page load:
    protected override async Task OnInitializedAsync ()
    {
        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Get, @$"{NavigationManager.BaseUri}kanban/getboard/20a88077-10d4-4648-92cb-7dc7ba5b8df5");

        var response = await http.SendAsync (httpRequestMessage);
        var responseBody = await response.Content.ReadAsStringAsync ();
        if (response.IsSuccessStatusCode)
        {
            var deserialized = JsonConvert.DeserializeObject<BoardResponse> (responseBody);

            TroubleshootText = deserialized.Columns.FirstOrDefault()?.Title; //Works!!

            _cards = ConvertBoardResponseToDropCardList (deserialized);
        }
    }

    public string TroubleshootText = "...Loading...";
    public void Troubleshoot()
    { }

    
    private void UpdateCard (MudItemDropInfo<DropCard> cardToUpdate)
    {
        cardToUpdate.Item.CardArea = cardToUpdate.DropzoneIdentifier;

        var newCardArea = ConvertCardAreaToColumnAndSwimlane (cardToUpdate.Item.CardArea);
        cardToUpdate.Item.ColumnID = _columns [newCardArea.columnPos];
        cardToUpdate.Item.ColumnName = _columnTitles [newCardArea.columnPos];
        cardToUpdate.Item.ColumnNumber = newCardArea.columnPos;
        cardToUpdate.Item.SwimlaneID = _swimlanes [newCardArea.swimlanePos];
        cardToUpdate.Item.SwimlaneName = _swimlaneTitles [newCardArea.swimlanePos];
        cardToUpdate.Item.SwimlaneNumber = newCardArea.swimlanePos;

        var cardResponse = Task.Run(() => 
            SendPatchRequest (cardToUpdate.Item)).Result;
    }

    private async Task<CardResponse?> SendPatchRequest (DropCard cardToUpdate)
    {
        var patchRequest = $@"[
            {{ ""op"": ""replace"", ""path"": ""/ColumnID"", ""value"": ""{cardToUpdate.ColumnID}"" }}, 
            {{ ""op"": ""replace"", ""path"": ""/ColumnTitle"", ""value"": ""{cardToUpdate.ColumnName}"" }},
            {{ ""op"": ""replace"", ""path"": ""/ColumnOrder"", ""value"": ""{cardToUpdate.ColumnNumber}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneID"", ""value"": ""{cardToUpdate.SwimlaneID}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneTitle"", ""value"": ""{cardToUpdate.SwimlaneName}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneOrder"", ""value"": ""{cardToUpdate.SwimlaneNumber}"" }}
        ]";

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Patch, @$"{NavigationManager.BaseUri}kanban/cards/updatecard/{cardToUpdate.Id}");
        httpRequestMessage.Content = new StringContent (patchRequest, mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserialized = JsonConvert.DeserializeObject<CardResponse> (responseBody);

            //tempString = deserialized.Columns.FirstOrDefault ()?.Title; //Works!!

            return deserialized;
        }

        return null;
    }

    public bool cardOverlayIsOpen = false;
    public void OpenCardOverlay ()
    {
        cardOverlayIsOpen = true;
        StateHasChanged();
    }

    public async Task<SwimlaneResponse> EditSwimlane (string swimlaneTitle, int swimlaneOrder) //Parameters should not be null. Defaults should be set in the UI probably
    {
        var patchRequest = $@"[
            {{ ""op"": ""replace"", ""path"": ""/Title"", ""value"": ""{swimlaneTitle}"" }},
            {{ ""op"": ""replace"", ""path"": ""/Order"", ""value"": ""{swimlaneOrder}"" }}
        ]";

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Post, @$"{NavigationManager.BaseUri}kanban/createswimlane");
        httpRequestMessage.Content = new StringContent (JsonConvert.SerializeObject (patchRequest), mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserialized = JsonConvert.DeserializeObject<SwimlaneResponse> (responseBody);

            _swimlanes [deserialized.Order] = deserialized.ID;
            _swimlaneTitles [deserialized.Order] = deserialized.Title;

            //Cards will need to have their position (SwimlaneOrder) changed as well

            return deserialized;
        }

        return null;
    }

    public bool swimlaneOverlayIsOpen = false;
    public void OpenSwimlaneOverlay ()
    {
        swimlaneOverlayIsOpen = true;
    }

    public bool columnOverlayIsOpen = false;
    public void OpenColumnOverlay ()
    {
        columnOverlayIsOpen = true;
    }

    public bool boardOverlayIsOpen = false;
    public void OpenBoardOverlay ()
    {
        boardOverlayIsOpen = true;
    }

    public bool calendarOverlayIsVisible = false;
    public void OpenCalendarOverlay ()
    {
        calendarOverlayIsVisible = true;
    }

    private (int swimlanePos, int columnPos) ConvertCardAreaToColumnAndSwimlane(string cardAreaValue)
    {
        var swimlanePos_columnPos = cardAreaValue.Split ("_");
        var swimlanePos = int.Parse (swimlanePos_columnPos.First ());
        var columnPos = int.Parse (swimlanePos_columnPos.Last ());

        return (swimlanePos, columnPos);
    }

    private string ConvertColumnAndSwimlaneToCardArea (int swimlanePos, int columnPos)
    {
        return (swimlanePos + "_" + columnPos);
    }

    private List<DropCard> ConvertBoardResponseToDropCardList (BoardResponse boardResponse)
    {
        var dropCardList = new List<DropCard>();

        _columnTitles = new List<string> ();
        _columns = new List<Guid> ();
        _swimlaneTitles = new List<string> ();
        _swimlanes = new List<Guid> ();

        var columnList = boardResponse.Columns;
        for (int columnIndex = 0; columnIndex < columnList.Count; columnIndex ++)
        {
            var swimlaneList = columnList [columnIndex].Swimlanes;

            for (int swimlaneIndex = 0; swimlaneIndex < swimlaneList.Count; swimlaneIndex ++)
            {
                var cardList = swimlaneList [swimlaneIndex].Cards;

                var cardArea = ConvertColumnAndSwimlaneToCardArea(swimlaneList [swimlaneIndex].Order, columnList [columnIndex].Order);
                foreach (var card in cardList)
                {
                    dropCardList.Add(new DropCard
                    {
                        Id = card.ID,
                        Title = card.Title,
                        Description = card.Description,
                        ColumnNumber = columnIndex,
                        ColumnID = Guid.Parse(columnList [columnIndex].ID),
                        ColumnName = columnList [columnIndex].Title,
                        SwimlaneNumber = swimlaneIndex,
                        SwimlaneID = Guid.Parse(swimlaneList [swimlaneIndex].ID),
                        SwimlaneName = swimlaneList [swimlaneIndex].Title,
                        CardArea = cardArea
                    });
                }
            }

            _columnTitles.Add (columnList [columnIndex].Title);
            _columns.Add (Guid.Parse(columnList [columnIndex].ID));
        }

        for (int swimlaneIndex = 0; swimlaneIndex < columnList [0].Swimlanes.Count; swimlaneIndex ++)
        {
            _swimlaneTitles.Add (columnList [0].Swimlanes [swimlaneIndex].Title);
            _swimlanes.Add(Guid.Parse(columnList[0].Swimlanes[swimlaneIndex].ID));
        }

        return dropCardList;
    }
}