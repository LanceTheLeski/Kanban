@using Kanban.UI.Options
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Kanban.Contracts.Request.Create
@using Kanban.Contracts.Response
@using Kanban.UI.Components.DTOs
@using Kanban.UI.Components.Layout
@using System.Net.Http.Headers

@inject HttpClient http
@inject IOptions<InterfaceOptions> interfaceOptions
@inject ISnackbar Snackbar

@inherits LayoutComponentBase

<MudOverlay @ref="populator" @bind-Visible="Open" DarkBackground="true" ZIndex="10">
    <MudPaper Width="600px" Class="mud-background">
        <MudTextField @bind-Value="ActiveCard.Title" T="string" Label="Title" Variant="Variant.Filled" HelperText="Card Title" Class="mud-theme-secondary"/>
        <MudTextField @bind-Value="ActiveCard.Description" T="string" Label="Description" Variant="Variant.Filled" AutoGrow Lines="7" HelperText="Description" Class="mud-theme-secondary"/>
        <MudButtonGroup Class="mud-background">
            <MudButton OnClick="(() => UpdateCard())">Save</MudButton>
            <MudButton OnClick="(() => DeleteCard())">Delete</MudButton>
            <MudButton OnClick="CloseCardOverlay">Discard</MudButton>
        </MudButtonGroup>
    </MudPaper>
</MudOverlay>

@code 
{
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public DropCard? ActiveCard { get; set; }
    [Parameter]
    public EventCallback<DropCard?> ActiveCardChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Refresh { get; set; }

    public string cardTitle = "";
    public string cardDescription = "";

    private MudOverlay populator;

    private void Fire (bool changed)
    {
        if (ActiveCard is not null)
        {
            cardTitle = ActiveCard.Title;
            cardDescription = ActiveCard.Description;
        }
    }

    private async Task UpdateCard ()
    {
        var patchRequestForTitle = string.IsNullOrEmpty (cardTitle) ? 
            "" : 
            $@"{{ ""op"": ""replace"", ""path"": ""/Title"", ""value"": ""{cardTitle}"" }},";
        var patchRequestForDescription = string.IsNullOrEmpty (cardDescription) ?
            "" :
            $@"{{ ""op"": ""replace"", ""path"": ""/Description"", ""value"": ""{cardDescription}"" }},";

        if (patchRequestForTitle is "" && patchRequestForDescription is "")
            return;

        var patchRequest =
        $@"[
            {patchRequestForTitle}
            {patchRequestForDescription}
        ]";

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Patch, @$"{interfaceOptions.Value.URL}kanban/cards/update/{ActiveCard.Id}");
        httpRequestMessage.Content = new StringContent (patchRequest, mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add ($"Could not update Column. Error code: {response.StatusCode}");
        }

        Refresh.InvokeAsync (true);

        CloseCardOverlay();
    }

    private async Task DeleteCard ()
    {
        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Delete, @$"{interfaceOptions.Value.URL}kanban/boards/delete/{ActiveCard.Id}");//Not sure if this should be
                                                                                                                                                  //boards or cards

        var response = await http.SendAsync (httpRequestMessage);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add ($"Could not update Column. Error code: {response.StatusCode}");
        }

        Refresh.InvokeAsync (true);

        CloseCardOverlay ();
    }

    private void CloseCardOverlay ()
    {
        Open = false;
        OpenChanged.InvokeAsync (Open);
    }
}