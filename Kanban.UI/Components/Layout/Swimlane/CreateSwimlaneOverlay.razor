@using Kanban.UI.Options
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Kanban.UI.Components.DTOs
@using Kanban.Contracts.Request.Create
@using Kanban.Contracts.Response
@using System.Net.Http.Headers

@inject HttpClient http
@inject IOptions<InterfaceOptions> interfaceOptions
@inject ISnackbar Snackbar

@rendermode RenderMode.InteractiveServer

<MudPaper>
    <MudText>Add a New Swimlane</MudText>
    <MudTextField T="string" @bind-Value="swimlaneTitle" Label="Title" Variant="Variant.Filled" AutoGrow HelperText="Swimlane Title" />
    <MudTextField T="string" @bind-Value="swimlaneOrder" Label="Order" Variant="Variant.Filled" AutoGrow HelperText="Swimlane Order" />
    <MudButtonGroup>
        <MudButton OnClick="CreateSwimlane">Submit</MudButton>
        <MudButton OnClick="CloseSwimlaneOverlay">Discard</MudButton>
    </MudButtonGroup>
</MudPaper>

@code
{
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public List<Guid> Swimlanes { get; set; }
    [Parameter]
    public EventCallback<List<Guid>> SwimlanesChanged { get; set; }

    [Parameter]
    public List<string> SwimlaneTitles { get; set; }
    [Parameter]
    public EventCallback<List<string>> SwimlaneTitlesChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Refresh { get; set; }

    private static List<Guid> _swimlanes = new List<Guid> ();
    private static List<string> _swimlaneTitles = new List<string> ();

    public CreateSwimlaneOverlay ()
    {
        Open = false;
        _swimlanes = Swimlanes;
        _swimlaneTitles = SwimlaneTitles;
    }

    private string swimlaneTitle = "";
    private string swimlaneOrder = "";
    private async Task<SwimlaneResponse> CreateSwimlane ()
    {
        int? order = null;
        try
        {
            order = swimlaneOrder is not null ?
                int.Parse (swimlaneOrder) :
                Swimlanes.Count ();
        }
        catch (FormatException)
        {
            Snackbar.Add ("Could not add new Swimlane. The input for Order was invalid.");
        }

        var createRequest = new SwimlaneCreateRequest
        {
            Title = swimlaneTitle,
            Order = order!.Value,
            BoardID = Guid.Parse ("20a88077-10d4-4648-92cb-7dc7ba5b8df5")
        };

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Post, @$"{interfaceOptions.Value.URL}kanban/swimlanes/create");
        httpRequestMessage.Content = new StringContent (JsonConvert.SerializeObject (createRequest), mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserialized = JsonConvert.DeserializeObject<SwimlaneResponse> (responseBody);

            Swimlanes.Insert (deserialized.Order, deserialized.ID);
            await SwimlanesChanged.InvokeAsync (Swimlanes);

            SwimlaneTitles.Insert (deserialized.Order, deserialized.Title);
            await SwimlaneTitlesChanged.InvokeAsync (SwimlaneTitles);

            Refresh.InvokeAsync (true);

            return deserialized;
        }

        var responseErrorBody = await response.Content.ReadAsStringAsync ();
        Snackbar.Add ($"Error: {responseErrorBody}");

        return null;
    }

    private void CloseSwimlaneOverlay ()
    {
        Open = false;
        OpenChanged.InvokeAsync (Open);
    }
}