@using Kanban.UI.Options
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Kanban.UI.Components.DTOs
@using System.Net.Http.Headers

@inject HttpClient http
@inject IOptions<InterfaceOptions> interfaceOptions
@inject ISnackbar Snackbar

@rendermode RenderMode.InteractiveServer

<MudPaper>
    <MudText>Edit Swimlane</MudText>
    <MudExpansionPanels>
        <MudExpansionPanel Text="Swimlane" MaxHeight="1000" ExpandedChanged="SwimlaneListExpandedChanged">
            @_swimlaneList
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudButtonGroup>
        <MudButton OnClick="RemoveSwimlane">Delete</MudButton>
        <MudButton OnClick="CloseSwimlaneOverlay">Cancel</MudButton>
    </MudButtonGroup>
</MudPaper>

@code
{
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public List<Guid> Swimlanes { get; set; }
    [Parameter]
    public EventCallback<List<Guid>> SwimlanesChanged { get; set; }

    [Parameter]
    public List<string> SwimlaneTitles { get; set; }
    [Parameter]
    public EventCallback<List<string>> SwimlaneTitlesChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Refresh { get; set; }

    private static List<Guid> _swimlanes = new List<Guid> ();
    private static List<string> _swimlaneTitles = new List<string> ();

    public DeleteSwimlaneOverlay ()
    {
        Open = false;
        _swimlanes = Swimlanes;
        _swimlaneTitles = SwimlaneTitles;
    }

    private RenderFragment _swimlaneList;
    private async Task SwimlaneListExpandedChanged (bool showSwimlanes)
    {
        _swimlanes = Swimlanes;
        _swimlaneTitles = SwimlaneTitles;

        if (showSwimlanes)
        {
            _swimlaneList = _swimlaneListRenderFragment ();
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay (350).ContinueWith (task => _swimlaneList = null);
        }
    }

    private static string swimlaneTitleSelected = "";
    private RenderFragment _swimlaneListRenderFragment ()
    {
        return __builder =>
        {
            <MudPaper Class="d-inline-flex flex-grow-1 overflow-auto" Style="width: 300px; height: 200px;">
                <MudStack Class="flex-grow-1" Width="100%" Height="100%">
                    <MudList T="string" ReadOnly="false">
                        @foreach (var swimlaneTitle in _swimlaneTitles)
                        {
                            <MudListItem OnClick="(() => SetSwimlaneNameToDelete (swimlaneTitle))">
                                Swimlane Name: @(swimlaneTitle)
                            </MudListItem>
                        }
                    </MudList>
                </MudStack>
            </MudPaper>
        };
    }

    private static async Task SetSwimlaneNameToDelete (string swimlaneName)
    {
        var matchingSwimlaneNameCount = _swimlaneTitles.FindAll (swimlane => swimlane == swimlaneName).Count ();
        if (matchingSwimlaneNameCount is not 1)
        {
            // Should we throw exceptions? Or have the snackbar display exceptions?
            // I think that the API should throw exceptions and the Blazor UI should maybe use something reliable like the snackbar.
            throw new Exception ($"The swimlane selected does not correspond to a single swimlane in our list of swimlanes. Number of this swimlane found: {matchingSwimlaneNameCount}");
        }

        swimlaneTitleSelected = swimlaneName;
    }

    private async Task RemoveSwimlane ()
    {
        //Keep in mind that on a given board, swimlane names should be unique.
        var swimlaneToDeleteListIndex = _swimlaneTitles.IndexOf (swimlaneTitleSelected);
        var swimlaneToDeleteGuid = _swimlanes [swimlaneToDeleteListIndex];

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Delete, @$"{interfaceOptions.Value.URL}kanban/swimlanes/delete/{swimlaneToDeleteGuid}");

        var response = await http.SendAsync (httpRequestMessage);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add ($"Could not delete Swimlane. Error code: {response.StatusCode}");
        }

        Swimlanes.RemoveAt (swimlaneToDeleteListIndex);
        await SwimlanesChanged.InvokeAsync (_swimlanes);

        SwimlaneTitles.RemoveAt (swimlaneToDeleteListIndex);
        await SwimlaneTitlesChanged.InvokeAsync (_swimlaneTitles);

        Refresh.InvokeAsync (true);

        CloseSwimlaneOverlay ();
    }

    private void CloseSwimlaneOverlay ()
    {
        Open = false;
        OpenChanged.InvokeAsync (Open);
    }
}