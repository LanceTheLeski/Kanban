@using Kanban.UI.Options
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Kanban.Contracts.Request.Create
@using Kanban.Contracts.Request.Patch
@using Kanban.Contracts.Response
@using Kanban.UI.Components;
@using Kanban.UI.Components.DTOs
@using Kanban.UI.Components.Layout.Board
@using Kanban.UI.Components.Layout.Card
@using Kanban.UI.Components.Layout.Column
@using Kanban.UI.Components.Layout.Swimlane
@using System.Net.Http.Headers

@inject HttpClient http
@inject IOptions<InterfaceOptions> interfaceOptions

@page "/"

<PageTitle>Board</PageTitle>

@rendermode RenderMode.InteractiveServer

<MudThemeProvider Theme="@MyMudThemeProvider._kanbanBoardDefaultTheme"/>
<MudPaper Class="mud-theme-backgroundgray">
    <BoardManagementNavigationBar @bind-Cards="_cards"
                                  @bind-Swimlanes="_swimlanes"
                                  @bind-SwimlaneTitles="_swimlaneTitles"
                                  @bind-Columns="_columns"
                                  @bind-ColumnTitles="_columnTitles"
                                  Refresh="Refresh"/>
    <MudGrid Spacing="0" 
             Class="d-flex flex-column">
        <MudItem>
            <MudPaper Height="75px"
                      Class="mud-theme-primary">
                <MudGrid>
                    <MudItem>
                        <MudPaper Width="120px">X</MudPaper>
                    </MudItem>
                    @foreach (var columnIndex in Enumerable.Range (0, _columnTitles.Count ()))//Just tried to delete a column and _columnTitles is null here, resulting in an exception. Maybe call the StateHasChanged method?
                    {
                        <MudItem>
                            <MudPaper Width="150px" 
                                      Class="align-self-center">
                                @(_columnTitles [columnIndex])
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudDropContainer @ref="_dropContainer"
                          T="DropCard" 
                          Items="_cards" 
                          ItemDropped="UpdateCard" 
                          ItemsSelector="@((card, dropzone) => card.CardArea == dropzone)">
            <ChildContent>
                @foreach (var rowIndex in Enumerable.Range(0, _swimlaneTitles.Count()))
                {
                    <MudItem>
                        <MudPaper Height="250px" 
                                  Style="background-color: wheat">
                            <MudGrid>
                                <MudItem>
                                    <MudPaper Width="120px" 
                                                Class="align-self-center"
                                                Style="background-color: lightcoral">
                                        @(_swimlaneTitles [rowIndex])
                                    </MudPaper>
                                </MudItem>

                                @foreach (var columnIndex in Enumerable.Range (0, _columnTitles.Count ()))
                                {
                                    var identifier = rowIndex + "_" + columnIndex;
                                    <MudItem Style="height: 250px;">
                                        <!--We want columns to have a set width-->
                                        <MudList T="MudDropZone<DropCard>"
                                                    ReadOnly="false"
                                                    Class="d-flex flex-column mud-height-full" 
                                                    Style="height: 250px;">
                                            <MudDropZone T="DropCard" 
                                                            Identifier="@identifier" 
                                                            CanDropClass="mud-border-success"
                                                            Class="d-flex flex-wrap flex-grow-1 justify-space-around gap-4 pa-2 overflow-auto"
                                                            Style="background-color: cornflowerblue; width: 150px; height: 200px;"/>
                                        </MudList>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                }
            </ChildContent>

            <!--The ItemRenderer is a component of the MudDropZone and is in charge of rendering individual DropCards within it-->
            <ItemRenderer>
                <BoardCard @bind-Card="context"/>
            </ItemRenderer>
        </MudDropContainer>
    </MudGrid>
</MudPaper>

@code
{
    public List<DropCard> _cards = new List<DropCard> ();

    public List<Guid> _swimlanes = new List<Guid> ();
    public List<string> _swimlaneTitles = new ();

    public List<Guid> _columns = new List<Guid> ();
    public List<string> _columnTitles = new ();

    private MudDropContainer<DropCard> _dropContainer;

    //On page load:
    protected override async Task OnInitializedAsync ()
    {
        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Get, @$"{interfaceOptions.Value.URL}kanban/boards/fetch/20a88077-10d4-4648-92cb-7dc7ba5b8df5");

        var response = await http.SendAsync (httpRequestMessage);
        var responseBody = await response.Content.ReadAsStringAsync ();
        if (response.IsSuccessStatusCode)
        {
            var deserializedResponseBody = JsonConvert.DeserializeObject<BoardResponse> (responseBody);

            _cards = ConvertBoardResponseToDropCardList (deserializedResponseBody!);
        }
    }

    private async Task Refresh (bool stateHasChanged)
    {
        if (stateHasChanged)
        {
            await OnInitializedAsync ();
            _dropContainer.Items = _cards;
            _dropContainer.Refresh ();
        }
    }

    private void UpdateCard (MudItemDropInfo<DropCard> cardToUpdate)
    {
        cardToUpdate.Item.CardArea = cardToUpdate.DropzoneIdentifier;

        var newCardArea = ConvertCardAreaToColumnAndSwimlane (cardToUpdate.Item.CardArea);
        cardToUpdate.Item.ColumnID = _columns [newCardArea.columnPos];
        cardToUpdate.Item.ColumnName = _columnTitles [newCardArea.columnPos];
        cardToUpdate.Item.ColumnNumber = newCardArea.columnPos;
        cardToUpdate.Item.SwimlaneID = _swimlanes [newCardArea.swimlanePos];
        cardToUpdate.Item.SwimlaneName = _swimlaneTitles [newCardArea.swimlanePos];
        cardToUpdate.Item.SwimlaneNumber = newCardArea.swimlanePos;

        var cardResponse = Task.Run (() => 
            SendCardPatchRequest (cardToUpdate.Item)).Result;
    }

    private async Task<CardResponse?> SendCardPatchRequest (DropCard cardToUpdate)
    {
        var patchRequest = 
        $@"[
            {{ ""op"": ""replace"", ""path"": ""/ColumnID"", ""value"": ""{cardToUpdate.ColumnID}"" }}, 
            {{ ""op"": ""replace"", ""path"": ""/ColumnTitle"", ""value"": ""{cardToUpdate.ColumnName}"" }},
            {{ ""op"": ""replace"", ""path"": ""/ColumnOrder"", ""value"": ""{cardToUpdate.ColumnNumber}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneID"", ""value"": ""{cardToUpdate.SwimlaneID}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneTitle"", ""value"": ""{cardToUpdate.SwimlaneName}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneOrder"", ""value"": ""{cardToUpdate.SwimlaneNumber}"" }}
        ]";

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Patch, @$"{interfaceOptions.Value.URL}kanban/cards/update/{cardToUpdate.Id}");
        httpRequestMessage.Content = new StringContent (patchRequest, mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserializedResponseBody = JsonConvert.DeserializeObject<CardResponse> (responseBody);

            return deserializedResponseBody;
        }

        return null;
    }

    private (int swimlanePos, int columnPos) ConvertCardAreaToColumnAndSwimlane(string cardAreaValue)
    {
        var swimlanePos_columnPos = cardAreaValue.Split ("_");
        var swimlanePos = int.Parse (swimlanePos_columnPos.First ());
        var columnPos = int.Parse (swimlanePos_columnPos.Last ());

        return (swimlanePos, columnPos);
    }

    private string ConvertColumnAndSwimlaneToCardArea (int swimlanePos, int columnPos)
    {
        return (swimlanePos + "_" + columnPos);
    }

    private List<DropCard> ConvertBoardResponseToDropCardList (BoardResponse boardResponse)
    {
        var dropCardList = new List<DropCard>();

        _columnTitles = new List<string> ();
        _columns = new List<Guid> ();
        _swimlaneTitles = new List<string> ();
        _swimlanes = new List<Guid> ();

        var columnList = boardResponse.Columns;
        for (int columnIndex = 0; columnIndex < columnList.Count; columnIndex ++)
        {
            var swimlaneList = columnList [columnIndex].Swimlanes;

            for (int swimlaneIndex = 0; swimlaneIndex < swimlaneList.Count; swimlaneIndex ++)
            {
                var cardList = swimlaneList [swimlaneIndex].Cards;

                var cardArea = ConvertColumnAndSwimlaneToCardArea(swimlaneList [swimlaneIndex].Order, columnList [columnIndex].Order);
                foreach (var card in cardList)
                {
                    dropCardList.Add(new DropCard
                    {
                        Id = card.ID,
                        Title = card.Title,
                        Description = card.Description,
                        ColumnNumber = columnIndex,
                        ColumnID = Guid.Parse(columnList [columnIndex].ID),
                        ColumnName = columnList [columnIndex].Title,
                        SwimlaneNumber = swimlaneIndex,
                        SwimlaneID = Guid.Parse(swimlaneList [swimlaneIndex].ID),
                        SwimlaneName = swimlaneList [swimlaneIndex].Title,
                        CardArea = cardArea
                    });
                }
            }

            _columnTitles.Add (columnList [columnIndex].Title);
            _columns.Add (Guid.Parse(columnList [columnIndex].ID));
        }

        for (int swimlaneIndex = 0; swimlaneIndex < columnList [0].Swimlanes.Count; swimlaneIndex ++)
        {
            _swimlaneTitles.Add (columnList [0].Swimlanes [swimlaneIndex].Title);
            _swimlanes.Add(Guid.Parse(columnList[0].Swimlanes[swimlaneIndex].ID));
        }

        return dropCardList;
    }
}