@using Kanban.UI.Options
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Kanban.Contracts.Request.Create
@using Kanban.Contracts.Request.Patch
@using Kanban.Contracts.Response
@using Kanban.UI.Components.DTOs
@using Kanban.UI.Components.Layout.Board
@using Kanban.UI.Components.Layout.Card
@using Kanban.UI.Components.Layout.Column
@using Kanban.UI.Components.Layout.Swimlane
@using System.Net.Http.Headers

@inject HttpClient http
@inject IOptions<InterfaceOptions> interfaceOptions

@page "/"

<PageTitle>Board</PageTitle>

@rendermode RenderMode.InteractiveServer

<MudPaper>
    <MudMenu Label="Cards">
        <MudMenuItem OnClick="OpenCardOverlay">Add</MudMenuItem>
    </MudMenu>
    <MudMenu Label="Swimlanes">
        <MudMenuItem OnClick="OpenSwimlaneOverlay">Add</MudMenuItem>
        <MudMenuItem OnClick="OpenEditSwimlaneOverlay">Edit</MudMenuItem>
        <MudMenuItem OnClick="OpenDeleteSwimlaneOverlay">Delete</MudMenuItem>
    </MudMenu>
    <MudMenu Label="Columns">
        <MudMenuItem OnClick="OpenColumnOverlay">Add</MudMenuItem>
        <MudMenuItem OnClick="OpenEditColumnOverlay">Edit</MudMenuItem>
        <MudMenuItem OnClick="OpenDeleteColumnOverlay">Delete</MudMenuItem>
    </MudMenu>
    <MudMenu Label="Boards">
        <MudMenuItem OnClick="OpenBoardOverlay">Edit</MudMenuItem>
    </MudMenu>
</MudPaper>

<MudOverlay @bind-Visible="swimlaneOverlayIsOpen" DarkBackground="true" ZIndex="10">
    <CreateSwimlaneOverlay @bind-Open="swimlaneOverlayIsOpen"
                           @bind-Swimlanes="_swimlanes"
                           @bind-SwimlaneTitles="_swimlaneTitles" />
</MudOverlay>
<MudOverlay @bind-Visible="deleteSwimlaneOverlayIsOpen" DarkBackground="true" ZIndex="10">
    <DeleteSwimlaneOverlay @bind-Open="deleteSwimlaneOverlayIsOpen"
                           @bind-Swimlanes="_swimlanes"
                           @bind-SwimlaneTitles="_swimlaneTitles" />
</MudOverlay>
<MudOverlay @bind-Visible="editSwimlaneOverlayIsOpen" DarkBackground="true" ZIndex="10">
    <UpdateSwimlaneOverlay @bind-Open="editSwimlaneOverlayIsOpen"
                           @bind-Swimlanes="_swimlanes"
                           @bind-SwimlaneTitles="_swimlaneTitles" />
</MudOverlay>

<MudOverlay @bind-Visible="allNewColumnOverlayIsOpen" DarkBackground="true" ZIndex="10">
    <CreateColumnOverlay @bind-Open="allNewColumnOverlayIsOpen"
                         @bind-Columns="_columns"
                         @bind-ColumnTitles="_columnTitles" />
</MudOverlay>
<MudOverlay @bind-Visible="deleteColumnOverlayIsOpen" DarkBackground="true" ZIndex="10">
    <DeleteColumnOverlay @bind-Open="deleteColumnOverlayIsOpen"
                         @bind-Columns="_columns"
                         @bind-ColumnTitles="_columnTitles" /> 
</MudOverlay>
<MudOverlay @bind-Visible="editColumnOverlayIsOpen" DarkBackground="true" ZIndex="10">
    <UpdateColumnOverlay @bind-Open="editColumnOverlayIsOpen"
                         @bind-Columns="_columns"
                         @bind-ColumnTitles="_columnTitles" />
</MudOverlay>

<MudOverlay @bind-Visible="Open" DarkBackground="true" ZIndex="10">
    <CreateCardOverlay @bind-Open="Open"
                       @bind-Cards="_cards"
                       @bind-Columns="_columns"
                       @bind-ColumnTitles="_columnTitles"
                       @bind-Swimlanes="_swimlanes"
                       @bind-SwimlaneTitles="_swimlaneTitles" />
</MudOverlay>
<MudOverlay @bind-Visible="boardOverlayIsOpen" DarkBackground="true" ZIndex="10">
    <AddManageBoardOverlay @bind-Open="boardOverlayIsOpen" />
</MudOverlay>

<MudGrid Spacing="0" 
         Class="d-flex flex-column"
         Style="background-color: lightblue">
    <MudItem>
        <MudPaper Height="75px" 
                  Style="background-color: yellowgreen">
            <MudGrid>
                <MudItem>
                    <MudPaper Width="120px">X</MudPaper>
                </MudItem>
                @foreach (var columnIndex in Enumerable.Range (0, _columnTitles.Count ()))//Just tried to delete a column and _columnTitles is null here, resulting in an exception. Maybe call the StateHasChanged method?
                {
                    <MudItem>
                        <MudPaper Width="150px" 
                                  Class="align-self-center" 
                                  Style="background-color: darkturquoise;">
                            @(_columnTitles [columnIndex])
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudDropContainer T="DropCard" 
                      Items="_cards" 
                      ItemDropped="UpdateCard" 
                      ItemsSelector="@((card, dropzone) => card.CardArea == dropzone)">
        <ChildContent>
            @foreach (var rowIndex in Enumerable.Range(0, _swimlaneTitles.Count()))
            {
                <MudItem>
                    <MudPaper Height="250px" 
                              Style="background-color: wheat">
                        <MudGrid>
                            <MudItem>
                                <MudPaper Width="120px" 
                                          Class="align-self-center"
                                          Style="background-color: lightcoral">
                                    @(_swimlaneTitles [rowIndex])
                                </MudPaper>
                            </MudItem>

                            @foreach (var columnIndex in Enumerable.Range (0, _columnTitles.Count ()))
                            {
                                var identifier = rowIndex + "_" + columnIndex;
                                <MudItem Style="height: 250px;">
                                    <!--We want columns to have a set width-->
                                    <MudList T="MudDropZone<DropCard>"
                                             ReadOnly="false"
                                             Class="d-flex flex-column mud-height-full" 
                                             Style="height: 250px;">
                                        <MudDropZone T="DropCard" 
                                                     Identifier="@identifier" 
                                                     CanDropClass="mud-border-success"
                                                     Class="d-flex flex-wrap flex-grow-1 justify-space-around gap-4 pa-2 overflow-auto"
                                                     Style="background-color: cornflowerblue; width: 150px; height: 200px;"/>
                                    </MudList>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        </ChildContent>

        <!--The ItemRenderer is a component of the MudDropZone and is in charge of randering individual DropCards within it-->
        <ItemRenderer>
            <BoardCard @bind-Card="context"/>
        </ItemRenderer>
    </MudDropContainer>
</MudGrid>

@code
{
    // Lets run a test to see how quickly these are updated. Set a watch on one of these and hit a 
    // breakpoint immediately after a binding is updated and the invoke method is called. If it's 
    // updated then we're in business and can abstract away more stuff
    public List<DropCard> _cards = new List<DropCard> ();

    public List<string> _swimlaneTitles = new ();
    public List<Guid> _swimlanes = new List<Guid> ();

    public List<string> _columnTitles = new ();
    public List<Guid> _columns = new List<Guid> ();

    //On page load:
    protected override async Task OnInitializedAsync ()
    {
        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Get, @$"{interfaceOptions.Value.URL}kanban/boards/fetch/20a88077-10d4-4648-92cb-7dc7ba5b8df5");

        var response = await http.SendAsync (httpRequestMessage);
        var responseBody = await response.Content.ReadAsStringAsync ();
        if (response.IsSuccessStatusCode)
        {
            var deserializedResponseBody = JsonConvert.DeserializeObject<BoardResponse> (responseBody);

            _cards = ConvertBoardResponseToDropCardList (deserializedResponseBody!);
        }
    }

    private void UpdateCard (MudItemDropInfo<DropCard> cardToUpdate)
    {
        cardToUpdate.Item.CardArea = cardToUpdate.DropzoneIdentifier;

        var newCardArea = ConvertCardAreaToColumnAndSwimlane (cardToUpdate.Item.CardArea);
        cardToUpdate.Item.ColumnID = _columns [newCardArea.columnPos];
        cardToUpdate.Item.ColumnName = _columnTitles [newCardArea.columnPos];
        cardToUpdate.Item.ColumnNumber = newCardArea.columnPos;
        cardToUpdate.Item.SwimlaneID = _swimlanes [newCardArea.swimlanePos];
        cardToUpdate.Item.SwimlaneName = _swimlaneTitles [newCardArea.swimlanePos];
        cardToUpdate.Item.SwimlaneNumber = newCardArea.swimlanePos;

        var cardResponse = Task.Run (() => 
            SendPatchRequest (cardToUpdate.Item)).Result;
    }

    private async Task<CardResponse?> SendPatchRequest (DropCard cardToUpdate)
    {
        var patchRequest = 
        $@"[
            {{ ""op"": ""replace"", ""path"": ""/ColumnID"", ""value"": ""{cardToUpdate.ColumnID}"" }}, 
            {{ ""op"": ""replace"", ""path"": ""/ColumnTitle"", ""value"": ""{cardToUpdate.ColumnName}"" }},
            {{ ""op"": ""replace"", ""path"": ""/ColumnOrder"", ""value"": ""{cardToUpdate.ColumnNumber}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneID"", ""value"": ""{cardToUpdate.SwimlaneID}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneTitle"", ""value"": ""{cardToUpdate.SwimlaneName}"" }},
            {{ ""op"": ""replace"", ""path"": ""/SwimlaneOrder"", ""value"": ""{cardToUpdate.SwimlaneNumber}"" }}
        ]";

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Patch, @$"{interfaceOptions.Value.URL}kanban/cards/update/{cardToUpdate.Id}");
        httpRequestMessage.Content = new StringContent (patchRequest, mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserializedResponseBody = JsonConvert.DeserializeObject<CardResponse> (responseBody);

            return deserializedResponseBody;
        }

        return null;
    }

    public async Task<SwimlaneResponse> EditSwimlane (string swimlaneTitle, int swimlaneOrder) //Parameters should not be null. Defaults should be set in the UI probably
    {
        var patchRequest = $@"[
            {{ ""op"": ""replace"", ""path"": ""/Title"", ""value"": ""{swimlaneTitle}"" }},
            {{ ""op"": ""replace"", ""path"": ""/Order"", ""value"": ""{swimlaneOrder}"" }}
        ]";

        var httpRequestMessage = new HttpRequestMessage (HttpMethod.Post, @$"{interfaceOptions.Value.URL}kanban/swimlanes/create");
        httpRequestMessage.Content = new StringContent (JsonConvert.SerializeObject (patchRequest), mediaType: new MediaTypeHeaderValue (@"application/json"));

        var response = await http.SendAsync (httpRequestMessage);
        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync ();
            var deserialized = JsonConvert.DeserializeObject<SwimlaneResponse> (responseBody);

            _swimlanes [deserialized.Order] = deserialized.ID;
            _swimlaneTitles [deserialized.Order] = deserialized.Title;

            //Cards will need to have their position (SwimlaneOrder) changed as well

            return deserialized;
        }

        return null;
    }

    public bool Open = false;
    public void OpenCardOverlay ()
    {
        Open = true;
    }
    public void UpdateCardOverlayIsOpen (bool setCardOverlayIsOpen)
    {
        Open = setCardOverlayIsOpen;
    }

    public bool deleteColumnOverlayIsOpen = false;
    public void OpenDeleteColumnOverlay ()//Move elsewhere later
    {
        deleteColumnOverlayIsOpen = true;
    }
    public void UpdateDeleteColumnOverlay (bool setEditColumnOverlayIsOpen)
    {
        deleteColumnOverlayIsOpen = setEditColumnOverlayIsOpen;
    }
    public bool editColumnOverlayIsOpen = false;
    public void OpenEditColumnOverlay ()//Move elsewhere later
    {
        editColumnOverlayIsOpen = true;
    }
    public void UpdateEditColumnOverlay (bool setEditColumnOverlayIsOpen)
    {
        editColumnOverlayIsOpen = setEditColumnOverlayIsOpen;
    }
    public bool allNewColumnOverlayIsOpen = false;
    public void OpenColumnOverlay ()
    {
        allNewColumnOverlayIsOpen = true;
    }
    public void CloseColumnOverlay ()
    {
        allNewColumnOverlayIsOpen = false;
    }

    public bool deleteSwimlaneOverlayIsOpen = false;
    public void OpenDeleteSwimlaneOverlay ()//Move elsewhere later
    {
        deleteSwimlaneOverlayIsOpen = true;
    }
    public void UpdateDeleteSwimlaneOverlay (bool setEditSwimlaneOverlayIsOpen)
    {
        deleteSwimlaneOverlayIsOpen = setEditSwimlaneOverlayIsOpen;
    }

    public bool editSwimlaneOverlayIsOpen = false;
    public void OpenEditSwimlaneOverlay ()//Move elsewhere later
    {
        editSwimlaneOverlayIsOpen = true;
    }
    public void UpdateEditSwimlaneOverlay (bool setEditSwimlaneOverlayIsOpen)
    {
        editSwimlaneOverlayIsOpen = setEditSwimlaneOverlayIsOpen;
    }
    public bool swimlaneOverlayIsOpen = false;
    public void OpenSwimlaneOverlay ()
    {
        swimlaneOverlayIsOpen = true;
    }
    public void CloseSwimlaneOverlay ()
    {
        swimlaneOverlayIsOpen = false;
    }

    public bool boardOverlayIsOpen = false;
    public void OpenBoardOverlay ()
    {
        boardOverlayIsOpen = true;
    }

    public bool calendarOverlayIsVisible = false;
    public void OpenCalendarOverlay ()
    {
        calendarOverlayIsVisible = true;
    }

    private (int swimlanePos, int columnPos) ConvertCardAreaToColumnAndSwimlane(string cardAreaValue)
    {
        var swimlanePos_columnPos = cardAreaValue.Split ("_");
        var swimlanePos = int.Parse (swimlanePos_columnPos.First ());
        var columnPos = int.Parse (swimlanePos_columnPos.Last ());

        return (swimlanePos, columnPos);
    }

    private string ConvertColumnAndSwimlaneToCardArea (int swimlanePos, int columnPos)
    {
        return (swimlanePos + "_" + columnPos);
    }

    private List<DropCard> ConvertBoardResponseToDropCardList (BoardResponse boardResponse)
    {
        var dropCardList = new List<DropCard>();

        _columnTitles = new List<string> ();
        _columns = new List<Guid> ();
        _swimlaneTitles = new List<string> ();
        _swimlanes = new List<Guid> ();

        var columnList = boardResponse.Columns;
        for (int columnIndex = 0; columnIndex < columnList.Count; columnIndex ++)
        {
            var swimlaneList = columnList [columnIndex].Swimlanes;

            for (int swimlaneIndex = 0; swimlaneIndex < swimlaneList.Count; swimlaneIndex ++)
            {
                var cardList = swimlaneList [swimlaneIndex].Cards;

                var cardArea = ConvertColumnAndSwimlaneToCardArea(swimlaneList [swimlaneIndex].Order, columnList [columnIndex].Order);
                foreach (var card in cardList)
                {
                    dropCardList.Add(new DropCard
                    {
                        Id = card.ID,
                        Title = card.Title,
                        Description = card.Description,
                        ColumnNumber = columnIndex,
                        ColumnID = Guid.Parse(columnList [columnIndex].ID),
                        ColumnName = columnList [columnIndex].Title,
                        SwimlaneNumber = swimlaneIndex,
                        SwimlaneID = Guid.Parse(swimlaneList [swimlaneIndex].ID),
                        SwimlaneName = swimlaneList [swimlaneIndex].Title,
                        CardArea = cardArea
                    });
                }
            }

            _columnTitles.Add (columnList [columnIndex].Title);
            _columns.Add (Guid.Parse(columnList [columnIndex].ID));
        }

        for (int swimlaneIndex = 0; swimlaneIndex < columnList [0].Swimlanes.Count; swimlaneIndex ++)
        {
            _swimlaneTitles.Add (columnList [0].Swimlanes [swimlaneIndex].Title);
            _swimlanes.Add(Guid.Parse(columnList[0].Swimlanes[swimlaneIndex].ID));
        }

        return dropCardList;
    }
}